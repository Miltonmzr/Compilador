
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package back;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\012\000\002\002" +
    "\026\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\005\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\005" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\011\000\002\004\011\000\002\006\011\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\006\000\002\013\007\000\002\007\015\000" +
    "\002\017\016\000\002\017\022\000\002\010\011\000\002" +
    "\011\013\000\002\012\011\000\002\014\012\000\002\014" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\015\011\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\055\004\001\002\000\004\037\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\031\010\001\002\000\004\046\011\001\002\000" +
    "\004\037\012\001\002\000\004\031\013\001\002\000\006" +
    "\032\015\061\014\001\002\000\004\065\017\001\002\000" +
    "\004\032\016\001\002\000\004\002\000\001\002\000\004" +
    "\035\020\001\002\000\004\027\021\001\002\000\004\007" +
    "\022\001\002\000\004\033\023\001\002\000\004\034\024" +
    "\001\002\000\004\037\025\001\002\000\004\030\026\001" +
    "\002\000\004\031\027\001\002\000\020\006\036\007\031" +
    "\010\040\013\032\014\033\052\046\062\044\001\002\000" +
    "\030\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\030\ufffb\032\ufffb\043\ufffb\052\ufffb\062\ufffb\001\002\000" +
    "\004\037\227\001\002\000\004\027\221\001\002\000\004" +
    "\027\166\001\002\000\030\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\030\ufff0\032\ufff0\043\ufff0\052\ufff0" +
    "\062\ufff0\001\002\000\024\006\036\007\031\010\040\012" +
    "\066\013\032\014\033\032\163\052\046\062\044\001\002" +
    "\000\006\025\147\037\146\001\002\000\030\006\ufff5\007" +
    "\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\030\ufff5\032\ufff5" +
    "\043\ufff5\052\ufff5\062\ufff5\001\002\000\004\027\134\001" +
    "\002\000\030\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\030\ufff2\032\ufff2\043\ufff2\052\ufff2\062\ufff2\001" +
    "\002\000\030\006\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd" +
    "\014\ufffd\030\ufffd\032\ufffd\043\ufffd\052\ufffd\062\ufffd\001" +
    "\002\000\030\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\030\ufff9\032\ufff9\043\ufff9\052\ufff9\062\ufff9\001" +
    "\002\000\004\027\115\001\002\000\030\006\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\030\ufff7\032\ufff7\043" +
    "\ufff7\052\ufff7\062\ufff7\001\002\000\004\027\047\001\002" +
    "\000\004\006\050\001\002\000\004\037\112\001\002\000" +
    "\004\030\052\001\002\000\004\031\053\001\002\000\020" +
    "\006\036\007\031\010\040\013\032\014\033\052\046\062" +
    "\044\001\002\000\024\006\036\007\031\010\040\012\066" +
    "\013\032\014\033\032\064\052\046\062\044\001\002\000" +
    "\030\006\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\030\ufffc\032\ufffc\043\ufffc\052\ufffc\062\ufffc\001\002\000" +
    "\030\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\030\ufff1\032\ufff1\043\ufff1\052\ufff1\062\ufff1\001\002\000" +
    "\030\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\030\ufff8\032\ufff8\043\ufff8\052\ufff8\062\ufff8\001\002\000" +
    "\030\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\030\ufff3\032\ufff3\043\ufff3\052\ufff3\062\ufff3\001\002\000" +
    "\030\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\030\ufffa\032\ufffa\043\ufffa\052\ufffa\062\ufffa\001\002\000" +
    "\030\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\030\ufffe\032\ufffe\043\ufffe\052\ufffe\062\ufffe\001\002\000" +
    "\030\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6" +
    "\030\ufff6\032\ufff6\043\ufff6\052\ufff6\062\ufff6\001\002\000" +
    "\030\006\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\030\uffd4\032\uffd4\043\uffd4\052\uffd4\062\uffd4\001\002\000" +
    "\004\012\066\001\002\000\004\031\067\001\002\000\020" +
    "\006\036\007\031\010\040\013\032\014\033\052\046\062" +
    "\044\001\002\000\024\006\036\007\031\010\040\012\066" +
    "\013\032\014\033\032\071\052\046\062\044\001\002\000" +
    "\004\013\072\001\002\000\004\027\073\001\002\000\006" +
    "\026\076\037\075\001\002\000\004\030\107\001\002\000" +
    "\004\023\077\001\002\000\006\030\uffe5\036\uffe5\001\002" +
    "\000\012\005\103\026\102\037\101\040\100\001\002\000" +
    "\006\030\uffe3\036\uffe3\001\002\000\006\030\uffe2\036\uffe2" +
    "\001\002\000\006\030\uffe4\036\uffe4\001\002\000\006\005" +
    "\105\037\104\001\002\000\004\005\106\001\002\000\006" +
    "\030\uffe1\036\uffe1\001\002\000\006\030\uffe0\036\uffe0\001" +
    "\002\000\004\036\110\001\002\000\030\006\uffdb\007\uffdb" +
    "\010\uffdb\012\uffdb\013\uffdb\014\uffdb\030\uffdb\032\uffdb\043" +
    "\uffdb\052\uffdb\062\uffdb\001\002\000\030\006\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\014\ufff4\030\ufff4\032\ufff4\043" +
    "\ufff4\052\ufff4\062\ufff4\001\002\000\004\024\113\001\002" +
    "\000\004\007\114\001\002\000\004\030\uffd3\001\002\000" +
    "\020\006\036\007\031\010\040\013\032\014\033\052\046" +
    "\062\044\001\002\000\024\006\036\007\031\010\040\012" +
    "\066\013\032\014\033\030\117\052\046\062\044\001\002" +
    "\000\004\031\120\001\002\000\004\044\121\001\002\000" +
    "\004\037\122\001\002\000\004\024\123\001\002\000\020" +
    "\006\036\007\031\010\040\013\032\014\033\052\046\062" +
    "\044\001\002\000\024\006\036\007\031\010\040\012\066" +
    "\013\032\014\033\043\125\052\046\062\044\001\002\000" +
    "\004\036\126\001\002\000\004\050\127\001\002\000\032" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\024" +
    "\130\030\uffde\032\uffde\043\uffde\052\uffde\062\uffde\001\002" +
    "\000\020\006\036\007\031\010\040\013\032\014\033\052" +
    "\046\062\044\001\002\000\024\006\036\007\031\010\040" +
    "\012\066\013\032\014\033\043\132\052\046\062\044\001" +
    "\002\000\004\036\133\001\002\000\030\006\uffdd\007\uffdd" +
    "\010\uffdd\012\uffdd\013\uffdd\014\uffdd\030\uffdd\032\uffdd\043" +
    "\uffdd\052\uffdd\062\uffdd\001\002\000\006\026\076\037\075" +
    "\001\002\000\004\030\136\001\002\000\004\031\137\001" +
    "\002\000\020\006\036\007\031\010\040\013\032\014\033" +
    "\052\046\062\044\001\002\000\024\006\036\007\031\010" +
    "\040\012\066\013\032\014\033\032\141\052\046\062\044" +
    "\001\002\000\032\006\uffe6\007\uffe6\010\uffe6\011\142\012" +
    "\uffe6\013\uffe6\014\uffe6\030\uffe6\032\uffe6\043\uffe6\052\uffe6" +
    "\062\uffe6\001\002\000\004\031\143\001\002\000\020\006" +
    "\036\007\031\010\040\013\032\014\033\052\046\062\044" +
    "\001\002\000\024\006\036\007\031\010\040\012\066\013" +
    "\032\014\033\032\145\052\046\062\044\001\002\000\030" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\030" +
    "\uffdf\032\uffdf\043\uffdf\052\uffdf\062\uffdf\001\002\000\012" +
    "\015\152\024\154\025\155\036\153\001\002\000\004\037" +
    "\150\001\002\000\004\036\151\001\002\000\030\006\uffeb" +
    "\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\030\uffeb\032" +
    "\uffeb\043\uffeb\052\uffeb\062\uffeb\001\002\000\004\040\161" +
    "\001\002\000\030\006\uffef\007\uffef\010\uffef\012\uffef\013" +
    "\uffef\014\uffef\030\uffef\032\uffef\043\uffef\052\uffef\062\uffef" +
    "\001\002\000\004\040\157\001\002\000\004\036\156\001" +
    "\002\000\030\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\030\uffec\032\uffec\043\uffec\052\uffec\062\uffec\001" +
    "\002\000\004\036\160\001\002\000\030\006\uffee\007\uffee" +
    "\010\uffee\012\uffee\013\uffee\014\uffee\030\uffee\032\uffee\043" +
    "\uffee\052\uffee\062\uffee\001\002\000\004\036\162\001\002" +
    "\000\030\006\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014" +
    "\uffed\030\uffed\032\uffed\043\uffed\052\uffed\062\uffed\001\002" +
    "\000\004\032\164\001\002\000\004\032\165\001\002\000" +
    "\004\002\uffff\001\002\000\006\006\167\037\170\001\002" +
    "\000\004\037\212\001\002\000\004\015\176\001\002\000" +
    "\004\030\172\001\002\000\004\031\173\001\002\000\020" +
    "\006\036\007\031\010\040\013\032\014\033\052\046\062" +
    "\044\001\002\000\024\006\036\007\031\010\040\012\066" +
    "\013\032\014\033\032\175\052\046\062\044\001\002\000" +
    "\030\006\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda" +
    "\030\uffda\032\uffda\043\uffda\052\uffda\062\uffda\001\002\000" +
    "\004\040\177\001\002\000\004\036\200\001\002\000\006" +
    "\026\076\037\075\001\002\000\004\036\202\001\002\000" +
    "\006\025\205\037\204\001\002\000\004\030\uffd8\001\002" +
    "\000\006\024\207\025\210\001\002\000\004\037\206\001" +
    "\002\000\004\030\uffd5\001\002\000\004\040\211\001\002" +
    "\000\004\030\uffd6\001\002\000\004\030\uffd7\001\002\000" +
    "\004\015\213\001\002\000\004\040\214\001\002\000\004" +
    "\036\215\001\002\000\006\026\076\037\075\001\002\000" +
    "\004\036\217\001\002\000\006\025\205\037\204\001\002" +
    "\000\004\030\uffd9\001\002\000\006\026\076\037\075\001" +
    "\002\000\004\030\223\001\002\000\004\031\224\001\002" +
    "\000\020\006\036\007\031\010\040\013\032\014\033\052" +
    "\046\062\044\001\002\000\024\006\036\007\031\010\040" +
    "\012\066\013\032\014\033\032\226\052\046\062\044\001" +
    "\002\000\030\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\030\uffdc\032\uffdc\043\uffdc\052\uffdc\062\uffdc\001" +
    "\002\000\006\015\230\024\231\001\002\000\004\005\240" +
    "\001\002\000\004\005\232\001\002\000\006\005\234\037" +
    "\233\001\002\000\004\005\236\001\002\000\004\036\235" +
    "\001\002\000\030\006\uffea\007\uffea\010\uffea\012\uffea\013" +
    "\uffea\014\uffea\030\uffea\032\uffea\043\uffea\052\uffea\062\uffea" +
    "\001\002\000\004\036\237\001\002\000\030\006\uffe8\007" +
    "\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\030\uffe8\032\uffe8" +
    "\043\uffe8\052\uffe8\062\uffe8\001\002\000\006\005\242\037" +
    "\241\001\002\000\004\005\244\001\002\000\004\036\243" +
    "\001\002\000\030\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\030\uffe9\032\uffe9\043\uffe9\052\uffe9\062\uffe9" +
    "\001\002\000\004\036\245\001\002\000\030\006\uffe7\007" +
    "\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\030\uffe7\032\uffe7" +
    "\043\uffe7\052\uffe7\062\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\034\004\041\006" +
    "\027\007\042\010\036\012\040\015\033\017\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\004\061\006\054" +
    "\007\060\010\056\011\064\012\057\015\055\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\053\004\041\006\027\007\042" +
    "\010\036\012\040\015\033\017\044\001\001\000\022\004" +
    "\061\006\054\007\060\010\056\011\064\012\057\015\055" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\110\001\001\000\002\001\001\000\022\003\067\004\041" +
    "\006\027\007\042\010\036\012\040\015\033\017\044\001" +
    "\001\000\022\004\061\006\054\007\060\010\056\011\064" +
    "\012\057\015\055\017\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\115\004\041\006\027\007\042\010\036\012\040" +
    "\015\033\017\044\001\001\000\022\004\061\006\054\007" +
    "\060\010\056\011\064\012\057\015\055\017\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\123\004\041\006\027\007\042" +
    "\010\036\012\040\015\033\017\044\001\001\000\022\004" +
    "\061\006\054\007\060\010\056\011\064\012\057\015\055" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\130\004\041\006\027\007\042" +
    "\010\036\012\040\015\033\017\044\001\001\000\022\004" +
    "\061\006\054\007\060\010\056\011\064\012\057\015\055" +
    "\017\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\137\004\041\006\027\007\042\010\036\012" +
    "\040\015\033\017\044\001\001\000\022\004\061\006\054" +
    "\007\060\010\056\011\064\012\057\015\055\017\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\143" +
    "\004\041\006\027\007\042\010\036\012\040\015\033\017" +
    "\044\001\001\000\022\004\061\006\054\007\060\010\056" +
    "\011\064\012\057\015\055\017\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\003\173" +
    "\004\041\006\027\007\042\010\036\012\040\015\033\017" +
    "\044\001\001\000\022\004\061\006\054\007\060\010\056" +
    "\011\064\012\057\015\055\017\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\200" +
    "\001\001\000\002\001\001\000\004\005\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\215\001\001\000\002\001\001\000\004\005" +
    "\217\001\001\000\002\001\001\000\004\013\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\003\224\004" +
    "\041\006\027\007\042\010\036\012\040\015\033\017\044" +
    "\001\001\000\022\004\061\006\054\007\060\010\056\011" +
    "\064\012\057\015\055\017\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA LLAVE_CIERRE LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA STATIC VOID MAIN PARENTESIS_APERTURA CADENA CORCHETE_APERTURA CORCHETE_CIERRE IDENTIFICADOR PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE LLAVE_CIERRE LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= sentencia declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= sentencia if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= sentencia if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= sentencia while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= sentencia switch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= sentencia do_while do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sentencia for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= sentencia foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= foreach 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion ::= TIPO_DATO IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= TIPO_DATO IDENTIFICADOR OPERADOR_ATRIBUCION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion ::= TIPO_DATO IDENTIFICADOR IGUAL NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion ::= TIPO_DATO IDENTIFICADOR OPERADOR_INCREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion ::= TIPO_DATO OPERADOR_INCREMENTO IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= CADENA IDENTIFICADOR OPERADOR_ATRIBUCION COMILLAS COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= CADENA IDENTIFICADOR IGUAL COMILLAS COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion ::= CADENA IDENTIFICADOR OPERADOR_ATRIBUCION COMILLAS IDENTIFICADOR COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion ::= CADENA IDENTIFICADOR IGUAL COMILLAS IDENTIFICADOR COMILLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_booleana ::= OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_booleana ::= IDENTIFICADOR OPERADOR_RELACIONAL OPERADOR_BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_booleana ::= IDENTIFICADOR OPERADOR_RELACIONAL NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_booleana ::= IDENTIFICADOR OPERADOR_RELACIONAL IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sentencia_booleana ::= IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentencia_booleana ::= IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_booleana",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // if_else ::= IF PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE ELSE LLAVE_APERTURA sentencia LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_else",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // switch ::= SWITCH PARENTESIS_APERTURA sentencia PARENTESIS_CIERRE LLAVE_APERTURA CASE IDENTIFICADOR OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA DEFAULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // switch ::= SWITCH PARENTESIS_APERTURA sentencia PARENTESIS_CIERRE LLAVE_APERTURA CASE IDENTIFICADOR OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA DEFAULT OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while ::= WHILE PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // do_while ::= DO LLAVE_APERTURA sentencia LLAVE_CIERRE WHILE PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("do_while",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for ::= FOR PARENTESIS_APERTURA sentencia_for PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentencia_for ::= TIPO_DATO IDENTIFICADOR IGUAL NUMERO PUNTO_COMA sentencia_booleana PUNTO_COMA declaracion_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentencia_for ::= IDENTIFICADOR IGUAL NUMERO PUNTO_COMA sentencia_booleana PUNTO_COMA declaracion_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_for ::= IDENTIFICADOR OPERADOR_ATRIBUCION NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_for",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_for ::= IDENTIFICADOR OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_for",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_for ::= OPERADOR_INCREMENTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_for",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // foreach ::= FOREACH PARENTESIS_APERTURA sentencia_foreach PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("foreach",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_foreach ::= TIPO_DATO IDENTIFICADOR OPERADOR_ATRIBUCION CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_foreach",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
