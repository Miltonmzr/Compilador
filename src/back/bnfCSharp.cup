package back;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
            + " column " + s.right);
    }
    
    public Symbol getS(){
        return s;
    }
:};

terminal LINEA, COMILLAS, TIPO_DATO, CADENA, IF, ELSE, DO, WHILE, FOR,
    IGUAL, SUMA, RESTA, MULTIPLICACION, DIVISION, OPERADOR_LOGICO, OPERADOR_RELACIONAL,
    OPERADOR_ATRIBUCION, OPERADOR_INCREMENTO, OPERADOR_BOOLEANO, PARENTESIS_APERTURA, PARENTESIS_CIERRE,
    LLAVE_APERTURA, LLAVE_CIERRE, CORCHETE_APERTURA, CORCHETE_CIERRE, MAIN, PUNTO_COMA, IDENTIFICADOR, NUMERO, ERROR, 
    ABSTRACT, BREAK, CASE, CATCH, CLASS, CONST, DEFAULT, FINALLY, FOREACH, GOTO, INTERFACE, NAMESPACE, 
    NULL, OUT, RETURN, STATIC, SWITCH, THROW, TRY, VOID, SYSTEM, WRITELINE, CONSOLE, WRITE, IDENTIFIER, 
    OPERADOR_CONTEXTUAL;
non terminal inicio, sentencia, declaracion, declaracion_for, if, if_else,
    while, do_while, for, sentencia_booleana, sentencia_for, foreach, sentencia_foreach, switch, funcion;

start with inicio;

inicio ::= 
    NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA LLAVE_CIERRE LLAVE_CIERRE |
    NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA STATIC VOID MAIN PARENTESIS_APERTURA CADENA CORCHETE_APERTURA CORCHETE_CIERRE IDENTIFICADOR PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE LLAVE_CIERRE LLAVE_CIERRE
;
sentencia ::= 
    sentencia declaracion |
    declaracion |
    sentencia if | 
    if |
    sentencia if_else |
    if_else |
    sentencia while |
    switch |
    sentencia switch |
    while |
    sentencia do_while
    do_while |
    sentencia for |
    for |
    sentencia foreach |
    foreach
;
declaracion ::= 
    TIPO_DATO IDENTIFICADOR PUNTO_COMA | 
    TIPO_DATO IDENTIFICADOR OPERADOR_ATRIBUCION NUMERO PUNTO_COMA |
    TIPO_DATO IDENTIFICADOR IGUAL NUMERO PUNTO_COMA |
    TIPO_DATO IDENTIFICADOR OPERADOR_INCREMENTO PUNTO_COMA | 
    TIPO_DATO OPERADOR_INCREMENTO IDENTIFICADOR PUNTO_COMA | 
    CADENA IDENTIFICADOR OPERADOR_ATRIBUCION COMILLAS COMILLAS PUNTO_COMA |
    CADENA IDENTIFICADOR IGUAL COMILLAS COMILLAS PUNTO_COMA |
    CADENA IDENTIFICADOR OPERADOR_ATRIBUCION COMILLAS IDENTIFICADOR COMILLAS PUNTO_COMA |
    CADENA IDENTIFICADOR IGUAL COMILLAS IDENTIFICADOR COMILLAS PUNTO_COMA
;
if ::= IF PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
sentencia_booleana ::= 
    OPERADOR_BOOLEANO | 
    IDENTIFICADOR OPERADOR_RELACIONAL OPERADOR_BOOLEANO |
    IDENTIFICADOR OPERADOR_RELACIONAL NUMERO |
    IDENTIFICADOR OPERADOR_RELACIONAL IDENTIFICADOR |
    IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS COMILLAS |
    IDENTIFICADOR OPERADOR_RELACIONAL COMILLAS IDENTIFICADOR COMILLAS
;
if_else ::= IF PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE ELSE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
switch ::= 
    SWITCH PARENTESIS_APERTURA sentencia PARENTESIS_CIERRE LLAVE_APERTURA CASE IDENTIFICADOR OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA DEFAULT | 
    SWITCH PARENTESIS_APERTURA sentencia PARENTESIS_CIERRE LLAVE_APERTURA CASE IDENTIFICADOR OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA DEFAULT OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA
;
while ::= WHILE PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
do_while ::= DO LLAVE_APERTURA sentencia LLAVE_CIERRE WHILE PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE PUNTO_COMA
;
for ::= FOR PARENTESIS_APERTURA sentencia_for PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
sentencia_for ::=
    TIPO_DATO IDENTIFICADOR IGUAL NUMERO PUNTO_COMA sentencia_booleana PUNTO_COMA declaracion_for |
    IDENTIFICADOR IGUAL NUMERO PUNTO_COMA sentencia_booleana PUNTO_COMA declaracion_for
;
declaracion_for ::= 
    IDENTIFICADOR OPERADOR_ATRIBUCION NUMERO |
    IDENTIFICADOR OPERADOR_INCREMENTO | 
    OPERADOR_INCREMENTO IDENTIFICADOR
;
foreach ::= FOREACH PARENTESIS_APERTURA sentencia_foreach PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
sentencia_foreach ::=
    TIPO_DATO IDENTIFICADOR OPERADOR_ATRIBUCION CADENA
;

funcion ::= 
    TIPO_DATO IDENTIFICADOR PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia RETURN sentencia_booleana LLAVE_CIERRE 
;