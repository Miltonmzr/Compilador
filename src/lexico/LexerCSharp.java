/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package lexico;

import java_cup.runtime.*;
import sintactico.sym;

/**
 * This class is a simple example lexer.
*/


public class LexerCSharp implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
    26, 26, 26, 26, 26, 26, 26, 26, 26,  5,  2, 22, 22,  1, 26, 26, 
    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 83, 83, 83, 83, 
    21, 71, 80, 83, 25, 73, 69, 81, 78, 79,  4, 67, 77, 68, 77,  3, 
    27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 74,  8, 72, 64, 72, 83, 
    83, 47, 49, 53, 35, 31, 29, 19, 41, 15,  6, 58, 33, 55, 17, 37, 
    60,  6, 43, 12, 45,  9, 62, 39,  6, 51,  6, 65, 82, 66, 83, 25, 
    83, 48, 50, 54, 36, 32, 30, 20, 42, 16,  7, 59, 34, 56, 18, 38, 
    61,  7, 44, 13, 46, 10, 63, 40,  7, 52,  7, 75, 70, 76, 83, 26, 
    26, 26, 26, 26, 26, 23, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 
    26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 
    83, 83, 25, 25, 25, 25, 83, 83, 83, 83, 25, 83, 83, 26, 83, 83, 
    83, 83, 83, 83, 83, 25, 83, 83, 83, 83, 25, 83, 83, 83, 83, 83, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 83, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
    25, 25, 25, 25, 25, 25, 25, 83, 25, 25, 25, 25, 25, 25, 25, 25
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\4\1\0"+
    "\1\4\1\0\3\4\1\6\2\7\15\4\1\10\1\11"+
    "\1\12\1\13\1\14\3\15\1\16\1\6\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\2\1\3"+
    "\1\1\1\4\1\5\1\4\1\26\1\4\1\26\3\4"+
    "\2\7\15\4\1\10\1\11\1\12\1\13\1\14\3\15"+
    "\1\16\1\26\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\27\1\30\2\0\1\4\4\0\4\4\1\0"+
    "\1\31\1\4\1\31\3\4\1\0\7\4\1\32\17\4"+
    "\1\16\1\33\1\15\2\26\1\4\4\26\4\4\1\26"+
    "\1\31\1\4\1\31\3\4\1\26\7\4\1\32\17\4"+
    "\1\16\1\33\1\15\1\34\1\35\1\36\1\37\2\30"+
    "\3\0\1\4\5\0\5\4\2\40\3\4\1\0\2\4"+
    "\1\41\1\4\1\0\5\4\1\42\1\0\1\4\1\0"+
    "\4\4\1\43\1\0\6\4\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\3\26\1\4\5\26\5\4\2\40\3\4"+
    "\1\26\2\4\1\41\1\4\1\26\5\4\1\42\1\26"+
    "\1\4\1\26\4\4\1\43\1\26\6\4\1\26\2\4"+
    "\1\26\1\4\1\26\1\4\1\0\1\30\1\0\1\4"+
    "\5\0\5\4\1\0\1\4\1\44\1\4\1\45\1\0"+
    "\1\4\1\0\2\46\1\40\1\4\1\0\2\4\1\0"+
    "\1\4\1\0\3\4\1\47\1\0\2\4\1\0\1\4"+
    "\1\0\1\4\2\50\1\4\2\51\2\52\1\26\1\30"+
    "\1\26\1\4\5\26\5\4\1\26\1\4\1\44\1\4"+
    "\1\45\1\26\1\4\1\26\2\46\1\40\1\4\1\26"+
    "\2\4\1\26\1\4\1\26\3\4\1\47\1\26\2\4"+
    "\1\26\1\4\1\26\1\4\2\50\1\4\2\51\2\52"+
    "\1\0\1\4\1\0\1\40\3\0\4\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\47\1\4\1\0\1\4"+
    "\2\53\2\54\1\4\1\55\1\0\1\4\2\56\2\57"+
    "\1\0\1\60\1\4\1\60\1\61\1\30\1\26\1\4"+
    "\1\26\1\40\3\26\4\4\1\26\1\4\1\26\1\4"+
    "\1\26\1\4\1\47\1\4\1\26\1\4\2\53\2\54"+
    "\1\4\1\55\1\26\1\4\2\56\2\57\1\26\1\60"+
    "\1\4\1\60\1\61\1\0\1\62\1\63\1\64\1\65"+
    "\1\62\1\63\1\64\1\65\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\1\66\1\0"+
    "\1\4\1\0\1\4\1\26\1\62\1\63\1\64\1\65"+
    "\1\62\1\63\1\64\1\65\1\26\1\4\1\26\1\4"+
    "\1\26\2\4\1\26\1\4\1\26\1\4\1\66\1\26"+
    "\1\4\1\26\1\4\2\0\1\4\1\0\1\4\2\67"+
    "\1\70\1\0\1\4\1\0\1\4\2\71\2\26\1\4"+
    "\1\26\1\4\2\67\1\70\1\26\1\4\1\26\1\4"+
    "\2\71\1\0\1\30\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\2\72\1\26\1\30\1\26\1\4\1\26\1\4"+
    "\1\26\1\4\2\72\2\73\2\74\2\75\2\73\2\74"+
    "\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\250\0\u01f8"+
    "\0\u024c\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\250\0\250"+
    "\0\u0444\0\u0498\0\u04ec\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690"+
    "\0\u06e4\0\u0738\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\250"+
    "\0\250\0\u0930\0\u0984\0\u09d8\0\u0a2c\0\u08dc\0\u08dc\0\u0150"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\u0a80"+
    "\0\u0ad4\0\u0b28\0\u0a80\0\u0b7c\0\u0a80\0\u0bd0\0\u0c24\0\u0c78"+
    "\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0a80\0\u0e1c\0\u0e70\0\u0ec4"+
    "\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc\0\u1110\0\u1164"+
    "\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u0a80\0\u0a80\0\u1308\0\u135c"+
    "\0\u13b0\0\u1404\0\u12b4\0\u12b4\0\u0b28\0\u0a80\0\u0a80\0\u0a80"+
    "\0\u0a80\0\u0a80\0\u0a80\0\u0a80\0\u1458\0\u14ac\0\u1500\0\u1554"+
    "\0\u15a8\0\u15fc\0\u1650\0\u16a4\0\u16f8\0\u174c\0\u17a0\0\u17f4"+
    "\0\u1848\0\u189c\0\250\0\u18f0\0\u01a4\0\u1944\0\u1998\0\u19ec"+
    "\0\u1a40\0\u1a94\0\u1ae8\0\u1b3c\0\u1b90\0\u1be4\0\u1c38\0\u1c8c"+
    "\0\u1ce0\0\u1d34\0\u1d88\0\u1ddc\0\u1e30\0\u1e84\0\u1ed8\0\u1f2c"+
    "\0\u1f80\0\u1fd4\0\u2028\0\u207c\0\u20d0\0\u2124\0\u2178\0\u21cc"+
    "\0\250\0\250\0\250\0\u2220\0\u2274\0\u22c8\0\u231c\0\u2370"+
    "\0\u23c4\0\u2418\0\u246c\0\u24c0\0\u2514\0\u2568\0\u25bc\0\u0a80"+
    "\0\u2610\0\u0b7c\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808"+
    "\0\u285c\0\u28b0\0\u2904\0\u2958\0\u29ac\0\u2a00\0\u2a54\0\u2aa8"+
    "\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0\0\u2cf4\0\u2d48"+
    "\0\u2d9c\0\u2df0\0\u2e44\0\u2e98\0\u2eec\0\u0a80\0\u0a80\0\u0a80"+
    "\0\250\0\250\0\250\0\250\0\u2f40\0\250\0\u2f94\0\u2fe8"+
    "\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c\0\u31e0\0\u3234\0\u3288"+
    "\0\u32dc\0\u3330\0\u3384\0\u33d8\0\u342c\0\u3480\0\u34d4\0\u3528"+
    "\0\u357c\0\u35d0\0\u3624\0\u3678\0\u01a4\0\u36cc\0\u3720\0\u3774"+
    "\0\u37c8\0\u381c\0\u3870\0\u38c4\0\u01a4\0\u3918\0\u396c\0\u39c0"+
    "\0\u3a14\0\u3a68\0\u3abc\0\u3b10\0\u01a4\0\u3b64\0\u3bb8\0\u3c0c"+
    "\0\u3c60\0\u3cb4\0\u3d08\0\u3d5c\0\u3db0\0\u3e04\0\u3e58\0\u3eac"+
    "\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8\0\u414c"+
    "\0\u41a0\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u4398\0\u43ec"+
    "\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4\0\u4638\0\u468c"+
    "\0\u46e0\0\u0b7c\0\u4734\0\u4788\0\u47dc\0\u4830\0\u4884\0\u48d8"+
    "\0\u492c\0\u0b7c\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0\0\u4b24"+
    "\0\u4b78\0\u0b7c\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c\0\u4d70"+
    "\0\u4dc4\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010"+
    "\0\u5064\0\u2f94\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u5208\0\u525c"+
    "\0\u52b0\0\u5304\0\u5358\0\u53ac\0\u5400\0\u5454\0\u54a8\0\u54fc"+
    "\0\u01a4\0\u5550\0\u01a4\0\u55a4\0\u55f8\0\u564c\0\250\0\u01a4"+
    "\0\u01a4\0\u56a0\0\u56f4\0\u5748\0\u579c\0\u57f0\0\u5844\0\u5898"+
    "\0\u58ec\0\u5940\0\u5994\0\u01a4\0\u59e8\0\u5a3c\0\u5a90\0\u5ae4"+
    "\0\u5b38\0\u5b8c\0\u5be0\0\250\0\u01a4\0\u5c34\0\250\0\u01a4"+
    "\0\250\0\u01a4\0\u5c88\0\u3ffc\0\u5cdc\0\u5d30\0\u5d84\0\u5dd8"+
    "\0\u5e2c\0\u5e80\0\u5ed4\0\u5f28\0\u5f7c\0\u5fd0\0\u6024\0\u6078"+
    "\0\u60cc\0\u6120\0\u0b7c\0\u6174\0\u0b7c\0\u61c8\0\u621c\0\u6270"+
    "\0\u0a80\0\u0b7c\0\u0b7c\0\u62c4\0\u6318\0\u636c\0\u63c0\0\u6414"+
    "\0\u6468\0\u64bc\0\u6510\0\u6564\0\u65b8\0\u0b7c\0\u660c\0\u6660"+
    "\0\u66b4\0\u6708\0\u675c\0\u67b0\0\u6804\0\u0a80\0\u0b7c\0\u6858"+
    "\0\u0a80\0\u0b7c\0\u0a80\0\u0b7c\0\u68ac\0\u6900\0\u6954\0\250"+
    "\0\u69a8\0\u69fc\0\u6a50\0\u6aa4\0\u6af8\0\u6b4c\0\u6ba0\0\u6bf4"+
    "\0\u6c48\0\u6c9c\0\u6cf0\0\u6d44\0\u6d98\0\250\0\u6dec\0\u6e40"+
    "\0\u6e94\0\250\0\u01a4\0\u6ee8\0\u6f3c\0\u6f90\0\u01a4\0\u6fe4"+
    "\0\u7038\0\250\0\u01a4\0\250\0\u01a4\0\u708c\0\250\0\u70e0"+
    "\0\u01a4\0\u01a4\0\u0a80\0\u7134\0\u7188\0\u71dc\0\u0a80\0\u7230"+
    "\0\u7284\0\u72d8\0\u732c\0\u7380\0\u73d4\0\u7428\0\u747c\0\u74d0"+
    "\0\u7524\0\u7578\0\u75cc\0\u7620\0\u0a80\0\u7674\0\u76c8\0\u771c"+
    "\0\u0a80\0\u0b7c\0\u7770\0\u77c4\0\u7818\0\u0b7c\0\u786c\0\u78c0"+
    "\0\u0a80\0\u0b7c\0\u0a80\0\u0b7c\0\u7914\0\u0a80\0\u7968\0\u0b7c"+
    "\0\u0b7c\0\u79bc\0\250\0\250\0\250\0\250\0\u01a4\0\u01a4"+
    "\0\u01a4\0\u01a4\0\u7a10\0\u7a64\0\u7ab8\0\u7b0c\0\u7b60\0\u7bb4"+
    "\0\u7c08\0\u7c5c\0\u7cb0\0\u7d04\0\u7d58\0\u01a4\0\u7dac\0\u7e00"+
    "\0\u7e54\0\u7ea8\0\u7efc\0\u0a80\0\u0a80\0\u0a80\0\u0a80\0\u0b7c"+
    "\0\u0b7c\0\u0b7c\0\u0b7c\0\u7f50\0\u7fa4\0\u7ff8\0\u804c\0\u80a0"+
    "\0\u80f4\0\u8148\0\u819c\0\u81f0\0\u8244\0\u8298\0\u0b7c\0\u82ec"+
    "\0\u8340\0\u8394\0\u83e8\0\u843c\0\u8490\0\u84e4\0\u8538\0\u858c"+
    "\0\250\0\u01a4\0\u01a4\0\u85e0\0\u8634\0\u8688\0\u86dc\0\250"+
    "\0\u01a4\0\u8730\0\u8784\0\u87d8\0\u882c\0\u8880\0\u0a80\0\u0b7c"+
    "\0\u0b7c\0\u88d4\0\u8928\0\u897c\0\u89d0\0\u0a80\0\u0b7c\0\u8a24"+
    "\0\u79bc\0\u8a78\0\u8acc\0\u8b20\0\u8b74\0\u8bc8\0\u8c1c\0\250"+
    "\0\u01a4\0\u8c70\0\u7efc\0\u8cc4\0\u8d18\0\u8d6c\0\u8dc0\0\u8e14"+
    "\0\u8e68\0\u0a80\0\u0b7c\0\250\0\u01a4\0\250\0\u01a4\0\250"+
    "\0\u01a4\0\u0a80\0\u0b7c\0\u0a80\0\u0b7c\0\u0a80\0\u0b7c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\3\1\4\1\5\1\3\2\6\1\7\2\10"+
    "\1\11\2\12\1\13\2\14\2\15\2\16\1\3\2\17"+
    "\1\0\1\6\1\17\1\20\1\21\2\22\2\23\2\24"+
    "\2\25\2\26\2\27\2\6\2\30\2\31\2\32\2\33"+
    "\2\6\2\34\2\35\1\0\4\6\2\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\2\57\2\17"+
    "\1\60\2\3\1\61\1\62\1\63\2\64\1\65\2\66"+
    "\1\67\2\70\1\71\2\72\2\73\2\74\1\63\3\60"+
    "\1\64\1\60\1\75\1\76\2\77\2\100\2\101\2\102"+
    "\2\103\2\104\2\64\2\105\2\106\2\107\2\110\2\64"+
    "\2\111\2\112\1\60\4\64\2\113\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\57\1\134\1\135"+
    "\1\60\127\0\1\136\1\137\73\0\1\51\123\0\1\51"+
    "\31\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\40\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\140\2\141\1\0\6\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\73\0\2\142\2\143\2\0"+
    "\2\144\4\0\2\145\45\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\16\6\2\146"+
    "\2\147\2\6\2\150\4\6\2\151\4\6\1\0\6\6"+
    "\45\0\2\152\12\0\2\153\73\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\154\2\6\2\0\1\6"+
    "\1\0\4\6\2\155\32\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\156\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\26\6\2\157\10\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\14\6\2\160\22\6\1\0\6\6\57\0\2\21"+
    "\75\0\2\6\1\0\2\6\1\0\2\6\1\161\2\162"+
    "\4\6\2\0\1\6\1\0\10\6\2\163\2\6\2\164"+
    "\10\6\2\165\10\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\10\6\2\166\26\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\14\6\2\167\22\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\6\6\2\170\4\6\2\171\22\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\172\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\40\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\20\6\2\173\2\174\14\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\6\6\2\175\30\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\20\6\2\176\2\177\14\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\30\6\2\200\6\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\22\6\2\201\6\6\2\202\4\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\10\6\2\203\2\6\2\204"+
    "\2\6\2\205\4\6\2\206\10\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\26\6\2\207\10\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\14\6\2\210\22\6\1\0\6\6\124\0"+
    "\1\211\123\0\1\51\2\0\1\212\120\0\1\51\3\0"+
    "\1\212\124\0\1\213\124\0\1\213\15\0\1\60\2\0"+
    "\115\60\1\0\1\60\1\0\2\60\2\0\1\136\1\214"+
    "\73\60\1\126\17\60\1\0\1\60\1\0\2\60\2\0"+
    "\75\60\1\126\17\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\40\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\215\2\216\1\60\6\64\2\60\1\64\1\60\40\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\44\60\2\217\2\220\2\60\2\221\4\60\2\222\33\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\16\64\2\223\2\224\2\64\2\225\4\64\2\226\4\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\16\60\2\227\12\60\2\230\61\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\2\64\2\231\2\64\2\60\1\64\1\60\4\64"+
    "\2\232\32\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\233\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\26\64\2\234\10\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\14\64\2\235\22\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\30\60\2\76"+
    "\63\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\236\2\237\4\64\2\60"+
    "\1\64\1\60\10\64\2\240\2\64\2\241\10\64\2\242"+
    "\10\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\10\64\2\243\26\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\14\64\2\244\22\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\6\64\2\245\4\64\2\246\22\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\247\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\40\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\20\64\2\250\2\251\14\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\6\64\2\252\30\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\60\6\64\2\60\1\64"+
    "\1\60\20\64\2\253\2\254\14\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\30\64\2\255\6\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\22\64\2\256"+
    "\6\64\2\257\4\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\10\64\2\260"+
    "\2\64\2\261\2\64\2\262\4\64\2\263\10\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\26\64\2\264\10\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\14\64\2\265\22\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\75\60\1\266\17\60\1\0\1\60"+
    "\1\0\2\60\2\0\75\60\1\126\2\60\1\267\14\60"+
    "\1\0\1\60\1\0\2\60\2\0\75\60\1\126\3\60"+
    "\1\267\13\60\1\0\1\60\1\0\2\60\2\0\102\60"+
    "\1\270\12\60\1\0\1\60\1\0\2\60\2\0\103\60"+
    "\1\270\11\60\1\0\1\60\1\0\1\60\21\0\2\271"+
    "\30\0\2\272\2\273\41\0\1\274\3\0\1\136\1\275"+
    "\1\276\121\136\4\277\1\300\117\277\16\0\3\301\111\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\301\2\302\4\6"+
    "\2\0\1\6\1\0\40\6\1\0\6\6\42\0\3\303"+
    "\150\0\2\304\130\0\2\305\2\0\2\306\56\0\3\307"+
    "\114\0\2\6\1\0\2\6\1\0\2\6\1\303\2\310"+
    "\4\6\2\0\1\6\1\0\40\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\14\6\2\311\22\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\22\6\2\312\2\6\2\313\10\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\307\2\314\1\0"+
    "\6\6\2\0\1\6\1\0\40\6\1\0\6\6\101\0"+
    "\2\315\53\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\24\6\2\316\12\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\10\6\2\317\26\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\36\6\2\320\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\24\6\2\321\12\6\1\0\6\6"+
    "\45\0\2\322\107\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\2\6\2\323\2\6\2\0\1\6\1\0\40\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\14\6\2\324\22\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\22\6\2\325\14\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\10\6\2\326\26\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\327\2\330"+
    "\1\0\6\6\2\0\1\6\1\0\40\6\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6"+
    "\2\331\2\6\2\0\1\6\1\0\40\6\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\4\6\2\332\26\6\2\333\2\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\334\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\40\6\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\24\6\2\335\12\6\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\336\2\337"+
    "\4\6\2\0\1\6\1\0\40\6\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\340\2\341\4\6"+
    "\2\0\1\6\1\0\40\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\24\6\2\342\12\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\22\6\2\343\14\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\344\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\32\6\2\345\4\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\346\2\347\1\0\6\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\6\6"+
    "\2\350\30\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\24\6"+
    "\2\351\12\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\26\6"+
    "\2\352\10\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\353\2\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\26\6"+
    "\2\354\10\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\355\2\356\1\0\6\6\2\0\1\6\1\0\24\6"+
    "\2\357\12\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\360\2\361\4\6\2\0\1\6\1\0"+
    "\40\6\1\0\6\6\32\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\362\2\363\4\6\2\0\1\6\1\0\40\6"+
    "\1\0\6\6\24\0\1\364\2\277\1\364\1\365\113\364"+
    "\1\277\1\364\1\277\1\364\1\60\2\0\13\60\3\366"+
    "\77\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\366\2\367\4\64\2\60"+
    "\1\64\1\60\40\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\13\60\3\370\77\60\1\0\1\60"+
    "\1\0\2\60\2\0\42\60\2\371\51\60\1\0\1\60"+
    "\1\0\2\60\2\0\50\60\2\372\2\60\2\373\37\60"+
    "\1\0\1\60\1\0\2\60\2\0\10\60\3\374\102\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\370\2\375\4\64\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\14\64\2\376\22\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\22\64\2\377\2\64\2\u0100\10\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\374\2\u0101\1\60\6\64"+
    "\2\60\1\64\1\60\40\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\2\60\2\0\52\60\2\u0102\41\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\60\6\64\2\60\1\64\1\60\24\64"+
    "\2\u0103\12\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\10\64\2\u0104\26\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\36\64\2\u0105\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\24\64\2\u0106\12\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\16\60\2\u0107\75\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\2\64\2\u0108\2\64\2\60\1\64\1\60"+
    "\40\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\14\64\2\u0109\22\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\22\64\2\u010a\14\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\10\64\2\u010b\26\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\u010c"+
    "\2\u010d\1\60\6\64\2\60\1\64\1\60\40\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\2\64\2\u010e"+
    "\2\64\2\60\1\64\1\60\40\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\4\64\2\u010f\26\64\2\u0110\2\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\u0111\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\40\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\24\64\2\u0112\12\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\u0113\2\u0114\4\64"+
    "\2\60\1\64\1\60\40\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\u0115\2\u0116\4\64\2\60\1\64\1\60"+
    "\40\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\24\64\2\u0117\12\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\22\64\2\u0118\14\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\u0119\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\32\64\2\u011a\4\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\u011b"+
    "\2\u011c\1\60\6\64\2\60\1\64\1\60\40\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\6\64\2\u011d\30\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\24\64\2\u011e\12\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\26\64\2\u011f"+
    "\10\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\2\64\2\u0120\2\64\2\60\1\64\1\60\40\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\26\64\2\u0121\10\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\u0122\2\u0123\1\60\6\64\2\60\1\64\1\60"+
    "\24\64\2\u0124\12\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\u0125\2\u0126\4\64\2\60\1\64\1\60\40\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\u0127\2\u0128"+
    "\4\64\2\60\1\64\1\60\40\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\1\60\2\0\1\276\121\0\4\277"+
    "\1\u0129\122\277\1\u012a\1\u0129\117\277\21\0\2\u012b\107\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\u012c"+
    "\2\6\2\0\1\6\1\0\40\6\1\0\6\6\101\0"+
    "\2\u012d\120\0\2\u012e\65\0\3\u012f\160\0\2\u0130\122\0"+
    "\2\u0131\53\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\24\6\2\u0132\12\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\22\6\2\u0133\14\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\0\2\6\1\u012f"+
    "\2\u0134\4\6\2\0\1\6\1\0\40\6\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\24\6\2\u0135\12\6\1\0\6\6"+
    "\32\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\24\6\2\u0136\12\6\1\0\6\6"+
    "\63\0\2\u0137\71\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\6\6\2\u0138\30\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\10\6\2\u0139\26\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\6\6\2\u013a\30\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\14\6\2\u013b\22\6"+
    "\1\0\6\6\103\0\2\u013c\51\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\26\6"+
    "\2\u013d\10\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\26\6"+
    "\2\u0133\10\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\u013e\2\344\1\0\6\6\2\0\1\6\1\0\40\6"+
    "\1\0\6\6\63\0\2\u013f\71\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\6\6"+
    "\2\u0140\30\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\2\u0141\2\0\1\6\1\0"+
    "\40\6\1\0\6\6\32\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\26\6\2\u0142"+
    "\10\6\1\0\6\6\32\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\u0143\2\u0144\4\6\2\0\1\6\1\0\40\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\30\6\2\u0145\6\6"+
    "\1\0\6\6\65\0\2\u0146\67\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\10\6"+
    "\2\u0147\26\6\1\0\6\6\101\0\2\u0148\53\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\24\6\2\u0149\12\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\u014a\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\14\6"+
    "\2\u014b\22\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\6\6"+
    "\2\u014c\30\6\1\0\6\6\101\0\2\u014d\53\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\24\6\2\u014e\12\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\26\6\2\u014f\10\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\6\6\2\u0141\30\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\u0150\2\u0151\1\0\6\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\u0152\2\u0153\1\0\6\6\2\0\1\6\1\0\40\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\22\6\2\u0141\14\6"+
    "\1\0\6\6\63\0\2\u0154\71\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\6\6"+
    "\2\u0155\30\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\34\6"+
    "\2\u0156\2\6\1\0\6\6\45\0\2\u0157\107\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\u0158\2\6"+
    "\2\0\1\6\1\0\40\6\1\0\6\6\67\0\2\u0159"+
    "\65\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\12\6\2\u015a\24\6\1\0\6\6"+
    "\24\0\1\364\2\277\1\364\1\u015b\113\364\1\277\1\364"+
    "\1\277\2\364\2\277\1\u015c\1\u015b\113\364\1\277\1\364"+
    "\1\277\1\364\1\60\2\0\16\60\2\u015d\75\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\60\2\64\2\u015e\2\64\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\52\60\2\u015f\41\60\1\0\1\60\1\0"+
    "\2\60\2\0\50\60\2\u0160\43\60\1\0\1\60\1\0"+
    "\2\60\2\0\13\60\3\u0161\77\60\1\0\1\60\1\0"+
    "\2\60\2\0\52\60\2\u0162\41\60\1\0\1\60\1\0"+
    "\2\60\2\0\52\60\2\u0163\41\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\24\64\2\u0164\12\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\22\64\2\u0165\14\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\u0161\2\u0166\4\64\2\60"+
    "\1\64\1\60\40\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\24\64\2\u0167"+
    "\12\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\24\64\2\u0168\12\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\34\60"+
    "\2\u0169\57\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\6\64\2\u016a\30\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\10\64\2\u016b\26\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\6\64\2\u016c"+
    "\30\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\14\64\2\u016d\22\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\54\60"+
    "\2\u016e\37\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\26\64\2\u016f\10\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\26\64\2\u0165\10\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\u0170"+
    "\2\u0119\1\60\6\64\2\60\1\64\1\60\40\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\34\60"+
    "\2\u0171\57\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\6\64\2\u0172\30\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\4\64\2\u0173\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\26\64\2\u0174\10\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\u0175\2\u0176"+
    "\4\64\2\60\1\64\1\60\40\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\30\64\2\u0177\6\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\36\60\2\u0178\55\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\10\64\2\u0179"+
    "\26\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\52\60\2\u017a\41\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\24\64\2\u017b\12\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\u017c\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\40\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\14\64\2\u017d"+
    "\22\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\6\64\2\u017e\30\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\52\60"+
    "\2\u017f\41\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\24\64\2\u0180\12\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\26\64\2\u0181\10\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\6\64\2\u0173"+
    "\30\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\u0182\2\u0183\1\60"+
    "\6\64\2\60\1\64\1\60\40\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\u0184\2\u0185\1\60\6\64\2\60\1\64\1\60"+
    "\40\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\22\64\2\u0173\14\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\34\60"+
    "\2\u0186\57\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\6\64\2\u0187\30\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\34\64\2\u0188\2\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\16\60\2\u0189\75\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\2\64\2\u018a\2\64\2\60\1\64\1\60"+
    "\40\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\40\60\2\u018b\53\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\12\64\2\u018c\24\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\1\60\3\277\1\276"+
    "\1\u0129\117\277\23\0\2\u018d\105\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\4\6\2\u018e\2\0\1\6\1\0"+
    "\40\6\1\0\6\6\111\0\2\u018f\112\0\2\u0190\66\0"+
    "\2\u0191\117\0\3\u0192\142\0\2\u0193\71\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\34\6\2\u0194\2\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\24\6\2\u0141\12\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\u0195\2\6\2\0"+
    "\1\6\1\0\40\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\u0192\2\u0196\4\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\32\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\6\6"+
    "\2\u0197\30\6\1\0\6\6\77\0\2\u0198\55\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\22\6\2\u0199\14\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\u019a\2\u019b\1\0\6\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\65\0\2\u019c\67\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\10\6\2\u019d\26\6\1\0\6\6\63\0\2\u019e"+
    "\71\0\2\6\1\0\2\u019f\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\40\6\1\0\6\6\113\0\2\u01a0"+
    "\41\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\36\6\2\u01a1\1\0\6\6\32\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\10\6\2\351\26\6\1\0\6\6\63\0"+
    "\2\u01a2\71\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\6\6\2\u01a3\30\6\1\0"+
    "\6\6\63\0\2\u01a4\71\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\6\6\2\u01a5"+
    "\30\6\1\0\6\6\32\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\22\6\2\u01a6"+
    "\14\6\1\0\6\6\32\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\16\6\2\u01a7"+
    "\20\6\1\0\6\6\77\0\2\u01a8\55\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\22\6\2\u01a9\14\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\40\6\1\u01aa\2\u01ab\4\6\37\0\3\u01ac\114\0\2\6"+
    "\1\0\2\6\1\u01ac\2\u01ad\1\0\6\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\71\0\2\u01ae\6\0\2\u01af"+
    "\53\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\14\6\2\u01b0\6\6\2\u01b1\12\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\20\6\2\u01b2\16\6"+
    "\1\0\6\6\24\0\1\364\2\277\1\u01b3\1\u015b\113\364"+
    "\1\277\1\364\1\277\1\364\1\60\2\0\20\60\2\u01b4"+
    "\73\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\60\4\64\2\u01b5\2\60"+
    "\1\64\1\60\40\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\62\60\2\u01b6\31\60\1\0\1\60"+
    "\1\0\2\60\2\0\52\60\2\u01b7\41\60\1\0\1\60"+
    "\1\0\2\60\2\0\16\60\2\u01b8\75\60\1\0\1\60"+
    "\1\0\2\60\2\0\13\60\3\u01b9\77\60\1\0\1\60"+
    "\1\0\2\60\2\0\34\60\2\u01ba\57\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\34\64\2\u01bb"+
    "\2\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\24\64\2\u0173\12\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\2\64\2\u01bc"+
    "\2\64\2\60\1\64\1\60\40\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\u01b9\2\u01bd\4\64\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\6\64\2\u01be\30\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\50\60\2\u01bf\43\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\22\64\2\u01c0\14\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\u01c1\2\u01c2\1\60\6\64\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\36\60\2\u01c3\55\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\10\64\2\u01c4\26\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\34\60\2\u01c5\57\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\u01c6\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\40\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\2\60\2\0\64\60\2\u01c7\27\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\60\6\64\2\60\1\64\1\60\36\64"+
    "\2\u01c8\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\10\64\2\u011e\26\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\34\60"+
    "\2\u01c9\57\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\6\64\2\u01ca\30\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\34\60\2\u01cb\57\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\6\64\2\u01cc\30\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\22\64\2\u01cd"+
    "\14\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\16\64\2\u01ce\20\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\50\60"+
    "\2\u01cf\43\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\22\64\2\u01d0\14\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\40\64\1\u01d1\2\u01d2\4\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\10\60\3\u01d3\102\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\u01d3\2\u01d4"+
    "\1\60\6\64\2\60\1\64\1\60\40\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\42\60\2\u01d5"+
    "\6\60\2\u01d6\41\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\14\64\2\u01d7\6\64\2\u01d8\12\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\20\64\2\u01d9\16\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\1\60\25\0\1\u01da\104\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\1\u01da"+
    "\1\0\1\6\1\0\40\6\1\0\6\6\75\0\2\u01db"+
    "\74\0\2\u01dc\164\0\2\u01dd\124\0\2\u01de\41\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\20\6\2\u01df\16\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\4\6\2\u01e0\2\0"+
    "\1\6\1\0\40\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\34\6\2\u01e1\2\6\1\0\6\6\32\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\36\6\2\u01e2\1\0\6\6\61\0\2\u01e3\73\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\4\6\2\u01e4\32\6\1\0\6\6\120\0\2\u01e5"+
    "\34\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\40\6\1\0\2\6\2\u01e6\2\6"+
    "\65\0\2\u01e7\67\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\10\6\2\u01e8\26\6"+
    "\1\0\6\6\32\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\10\6\2\u01e9\26\6"+
    "\1\0\6\6\103\0\2\u01ea\51\0\2\6\1\0\2\6"+
    "\1\0\2\6\1\0\6\6\2\0\1\6\1\0\26\6"+
    "\2\u01eb\10\6\1\0\6\6\65\0\2\u01ec\67\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\10\6\2\u01ed\26\6\1\0\6\6\32\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\u01ee\2\6"+
    "\2\0\1\6\1\0\40\6\1\0\6\6\103\0\2\u01ef"+
    "\51\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\26\6\2\u01f0\10\6\1\0\6\6"+
    "\65\0\2\u01f1\67\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\10\6\2\u01f2\26\6"+
    "\1\0\6\6\24\0\1\60\2\0\22\60\1\u01f3\72\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\1\u01f3\1\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\46\60\2\u01f4\45\60\1\0\1\60\1\0"+
    "\2\60\2\0\20\60\2\u01f5\73\60\1\0\1\60\1\0"+
    "\2\60\2\0\62\60\2\u01f6\31\60\1\0\1\60\1\0"+
    "\2\60\2\0\64\60\2\u01f7\27\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\20\64\2\u01f8\16\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\4\64"+
    "\2\u01f9\2\60\1\64\1\60\40\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\34\64\2\u01fa\2\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\36\64\2\u01fb"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\32\60\2\u01fc\61\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\4\64\2\u01fd\32\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\71\60\2\u01fe"+
    "\22\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\60\6\64\2\60\1\64"+
    "\1\60\40\64\1\60\2\64\2\u01ff\2\64\20\60\1\0"+
    "\1\60\1\0\2\60\2\0\36\60\2\u0200\55\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\60\6\64\2\60\1\64\1\60\10\64"+
    "\2\u0201\26\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\10\64\2\u0202\26\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\54\60\2\u0203\37\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\26\64\2\u0204\10\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\36\60\2\u0205"+
    "\55\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\60\6\64\2\60\1\64"+
    "\1\60\10\64\2\u0206\26\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\60\2\64\2\u0207\2\64\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\54\60\2\u0208\37\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\26\64\2\u0209\10\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\36\60\2\u020a\55\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\10\64\2\u020b\26\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\1\60\6\0\1\u020c\2\0"+
    "\1\u020c\2\0\1\u020c\2\0\1\u020c\1\0\1\u020c\1\0"+
    "\1\u020c\11\0\1\u020c\1\0\1\u020c\1\0\1\u020c\1\0"+
    "\1\u020c\1\0\1\u020c\1\0\1\u020c\1\0\1\u020c\1\0"+
    "\1\u020c\1\0\1\u020c\1\0\1\u020c\1\0\1\u020c\1\0"+
    "\1\u020c\1\0\1\u020c\1\0\1\u020c\2\0\1\u020c\1\0"+
    "\1\u020c\1\0\1\u020c\104\0\2\u020d\51\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\26\6\2\u020e\10\6\1\0\6\6\103\0\2\u020f\51\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\6\6\2\0"+
    "\1\6\1\0\26\6\2\u0210\10\6\1\0\6\6\107\0"+
    "\2\u0211\45\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\32\6\2\u0212\4\6\1\0"+
    "\6\6\32\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\24\6\2\u0213\12\6\1\0"+
    "\6\6\65\0\2\u0190\67\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\10\6\2\u0141"+
    "\26\6\1\0\6\6\42\0\3\u0214\111\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\u0214\2\u0215\4\6\2\0\1\6"+
    "\1\0\40\6\1\0\6\6\111\0\2\u0216\43\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\34\6\2\u0217\2\6\1\0\6\6\63\0\2\u0218"+
    "\71\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\6\6\2\u0219\30\6\1\0\6\6"+
    "\24\0\1\60\2\0\3\60\1\u021a\2\60\1\u021a\2\60"+
    "\1\u021a\2\60\1\u021a\1\60\1\u021a\1\60\1\u021a\11\60"+
    "\1\u021a\1\60\1\u021a\1\60\1\u021a\1\60\1\u021a\1\60"+
    "\1\u021a\1\60\1\u021a\1\60\1\u021a\1\60\1\u021a\1\60"+
    "\1\u021a\1\60\1\u021a\1\60\1\u021a\1\60\1\u021a\1\60"+
    "\1\u021a\1\60\1\u021a\2\60\1\u021a\1\60\1\u021a\1\60"+
    "\1\u021a\21\60\1\0\1\60\1\0\2\60\2\0\54\60"+
    "\2\u021b\37\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\26\64\2\u021c\10\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\54\60\2\u021d\37\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\60\6\64\2\60\1\64\1\60"+
    "\26\64\2\u021e\10\64\1\60\6\64\20\60\1\0\1\60"+
    "\1\0\2\60\2\0\60\60\2\u021f\33\60\1\0\1\60"+
    "\1\0\2\60\2\0\3\60\2\64\1\60\2\64\1\60"+
    "\2\64\1\60\6\64\2\60\1\64\1\60\32\64\2\u0220"+
    "\4\64\1\60\6\64\20\60\1\0\1\60\1\0\2\60"+
    "\2\0\3\60\2\64\1\60\2\64\1\60\2\64\1\60"+
    "\6\64\2\60\1\64\1\60\24\64\2\u0221\12\64\1\60"+
    "\6\64\20\60\1\0\1\60\1\0\2\60\2\0\36\60"+
    "\2\u01b7\55\60\1\0\1\60\1\0\2\60\2\0\3\60"+
    "\2\64\1\60\2\64\1\60\2\64\1\60\6\64\2\60"+
    "\1\64\1\60\10\64\2\u0173\26\64\1\60\6\64\20\60"+
    "\1\0\1\60\1\0\2\60\2\0\13\60\3\u0222\77\60"+
    "\1\0\1\60\1\0\2\60\2\0\3\60\2\64\1\60"+
    "\2\64\1\60\2\64\1\u0222\2\u0223\4\64\2\60\1\64"+
    "\1\60\40\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\62\60\2\u0224\31\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\34\64\2\u0225\2\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\34\60\2\u0226\57\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\6\64\2\u0227\30\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\1\60\1\u01da\2\0\4\u01da"+
    "\1\u0228\1\u0229\1\u01da\1\u0228\2\u01da\1\u0228\2\u01da\1\u0228"+
    "\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\3\0\5\u01da\1\u0228"+
    "\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228"+
    "\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228"+
    "\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228"+
    "\1\u01da\1\u0228\2\u01da\1\u0228\1\u01da\1\u0228\1\u01da\1\u0228"+
    "\24\u01da\65\0\2\u022a\43\0\2\6\1\0\2\6\1\0"+
    "\2\6\1\0\6\6\2\0\1\6\1\0\34\6\2\u022b"+
    "\2\6\1\0\6\6\111\0\2\u022c\43\0\2\6\1\0"+
    "\2\6\1\0\2\6\1\0\6\6\2\0\1\6\1\0"+
    "\34\6\2\u022d\2\6\1\0\6\6\45\0\2\u022e\107\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\u022f"+
    "\2\6\2\0\1\6\1\0\40\6\1\0\6\6\101\0"+
    "\2\u0230\53\0\2\6\1\0\2\6\1\0\2\6\1\0"+
    "\6\6\2\0\1\6\1\0\24\6\2\u0231\12\6\1\0"+
    "\6\6\24\0\1\u01f3\2\0\4\u01f3\1\u0232\1\u0233\1\u01f3"+
    "\1\u0232\2\u01f3\1\u0232\2\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3"+
    "\1\u0232\1\u01f3\3\60\5\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3"+
    "\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3"+
    "\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3"+
    "\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\2\u01f3"+
    "\1\u0232\1\u01f3\1\u0232\1\u01f3\1\u0232\20\u01f3\1\u01da\1\u01f3"+
    "\1\u01da\1\u01f3\1\60\2\0\62\60\2\u0234\31\60\1\0"+
    "\1\60\1\0\2\60\2\0\3\60\2\64\1\60\2\64"+
    "\1\60\2\64\1\60\6\64\2\60\1\64\1\60\34\64"+
    "\2\u0235\2\64\1\60\6\64\20\60\1\0\1\60\1\0"+
    "\2\60\2\0\62\60\2\u0236\31\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\34\64\2\u0237\2\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\16\60\2\u0238\75\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\2\64"+
    "\2\u0239\2\64\2\60\1\64\1\60\40\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\52\60\2\u023a"+
    "\41\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\60\6\64\2\60\1\64"+
    "\1\60\24\64\2\u023b\12\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\1\60\1\u01da\2\0\3\u01da\2\u0228\1\u0229"+
    "\2\u0228\1\u01da\2\u0228\1\u01da\6\u0228\1\u01da\3\0\4\u01da"+
    "\34\u0228\1\u01da\6\u0228\24\u01da\37\0\2\u023c\71\0\2\6"+
    "\1\0\2\6\1\0\2\6\1\0\6\6\2\0\1\6"+
    "\1\0\6\6\2\u023d\30\6\1\0\6\6\63\0\2\u023e"+
    "\71\0\2\6\1\0\2\6\1\0\2\6\1\0\6\6"+
    "\2\0\1\6\1\0\6\6\2\u023f\30\6\1\0\6\6"+
    "\63\0\2\u0240\71\0\2\6\1\0\2\6\1\0\2\6"+
    "\1\0\6\6\2\0\1\6\1\0\6\6\2\u0241\30\6"+
    "\1\0\6\6\24\0\1\u01f3\2\0\3\u01f3\2\u0232\1\u0233"+
    "\2\u0232\1\u01f3\2\u0232\1\u01f3\6\u0232\1\u01f3\3\60\4\u01f3"+
    "\34\u0232\1\u01f3\6\u0232\20\u01f3\1\u01da\1\u01f3\1\u01da\1\u01f3"+
    "\1\60\2\0\34\60\2\u0242\57\60\1\0\1\60\1\0"+
    "\2\60\2\0\3\60\2\64\1\60\2\64\1\60\2\64"+
    "\1\60\6\64\2\60\1\64\1\60\6\64\2\u0243\30\64"+
    "\1\60\6\64\20\60\1\0\1\60\1\0\2\60\2\0"+
    "\34\60\2\u0244\57\60\1\0\1\60\1\0\2\60\2\0"+
    "\3\60\2\64\1\60\2\64\1\60\2\64\1\60\6\64"+
    "\2\60\1\64\1\60\6\64\2\u0245\30\64\1\60\6\64"+
    "\20\60\1\0\1\60\1\0\2\60\2\0\34\60\2\u0246"+
    "\57\60\1\0\1\60\1\0\2\60\2\0\3\60\2\64"+
    "\1\60\2\64\1\60\2\64\1\60\6\64\2\60\1\64"+
    "\1\60\6\64\2\u0247\30\64\1\60\6\64\20\60\1\0"+
    "\1\60\1\0\1\60";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\1\1\1\0\1\1\1\0"+
    "\3\1\2\11\17\1\2\11\7\1\7\11\57\1\2\0"+
    "\1\1\4\0\4\1\1\0\1\11\5\1\1\0\27\1"+
    "\3\11\55\1\4\11\1\1\1\11\3\0\1\1\5\0"+
    "\12\1\1\0\4\1\1\0\6\1\1\0\1\1\1\0"+
    "\5\1\1\0\6\1\1\0\2\1\1\0\1\1\1\0"+
    "\66\1\1\0\1\1\1\0\1\1\5\0\5\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\11\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\2\1\1\11\1\1\1\11\63\1"+
    "\1\0\1\1\1\0\1\11\3\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\5\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\0\1\11\52\1\1\0\4\11\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\32\1\2\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\1\1\1\11\17\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\13\1\1\11\1\1\1\11\1\1\1\11\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[583];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
      
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCSharp(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 62: break;
          case 2: 
            { System.out.println(yytext()); return symbol(sym.DIVISION,yytext());
            }
          case 63: break;
          case 3: 
            { System.out.println(yytext()); return symbol(sym.MULTIPLICACION,yytext());
            }
          case 64: break;
          case 4: 
            { System.out.println(yytext()); return symbol(sym.IDENTIFICADOR,yytext());
            }
          case 65: break;
          case 5: 
            { System.out.println(yytext()); return symbol(sym.PUNTO_COMA,yytext());
            }
          case 66: break;
          case 6: 
            { throw new Error("Illegal character **"+
                                                        yytext()+"**");
            }
          case 67: break;
          case 7: 
            { return symbol(sym.NUMERO,yytext());
            }
          case 68: break;
          case 8: 
            { System.out.println(yytext()); return symbol(sym.IGUAL,yytext());
            }
          case 69: break;
          case 9: 
            { System.out.println(yytext()); return symbol(sym.CORCHETE_APERTURA,yytext());
            }
          case 70: break;
          case 10: 
            { System.out.println(yytext()); return symbol(sym.CORCHETE_CIERRE,yytext());
            }
          case 71: break;
          case 11: 
            { System.out.println(yytext()); return symbol(sym.SUMA,yytext());
            }
          case 72: break;
          case 12: 
            { System.out.println(yytext()); return symbol(sym.RESTA,yytext());
            }
          case 73: break;
          case 13: 
            { System.out.println(yytext()); return symbol(sym.OPERADOR_LOGICO,yytext());
            }
          case 74: break;
          case 14: 
            { System.out.println(yytext()); return symbol(sym.OPERADOR_RELACIONAL,yytext());
            }
          case 75: break;
          case 15: 
            { System.out.println(yytext()); return symbol(sym.OPERADOR_ATRIBUCION,yytext());
            }
          case 76: break;
          case 16: 
            { System.out.println(yytext()); return symbol(sym.LLAVE_APERTURA,yytext());
            }
          case 77: break;
          case 17: 
            { System.out.println(yytext()); return symbol(sym.LLAVE_CIERRE,yytext());
            }
          case 78: break;
          case 18: 
            { System.out.println(yytext()); return symbol(sym.OPERADOR_CONTEXTUAL,yytext());
            }
          case 79: break;
          case 19: 
            { System.out.println(yytext()); return symbol(sym.PARENTESIS_APERTURA,yytext());
            }
          case 80: break;
          case 20: 
            { System.out.println(yytext()); return symbol(sym.PARENTESIS_CIERRE,yytext());
            }
          case 81: break;
          case 21: 
            { System.out.println(yytext()); return symbol(sym.COMILLAS,yytext());
            }
          case 82: break;
          case 22: 
            { string.append( yytext() );
            }
          case 83: break;
          case 23: 
            { string.append('\\');
            }
          case 84: break;
          case 24: 
            { System.out.println(yytext());
            }
          case 85: break;
          case 25: 
            { System.out.println(yytext()); return symbol(sym.IF,yytext());
            }
          case 86: break;
          case 26: 
            { System.out.println(yytext()); return symbol(sym.DO,yytext());
            }
          case 87: break;
          case 27: 
            { System.out.println(yytext()); return symbol(sym.OPERADOR_INCREMENTO,yytext());
            }
          case 88: break;
          case 28: 
            { string.append('\n');
            }
          case 89: break;
          case 29: 
            { string.append('\r');
            }
          case 90: break;
          case 30: 
            { string.append('\t');
            }
          case 91: break;
          case 31: 
            { string.append('\"');
            }
          case 92: break;
          case 32: 
            { System.out.println(yytext()); return symbol(sym.TIPO_DATO,yytext());
            }
          case 93: break;
          case 33: 
            { System.out.println(yytext()); return symbol(sym.FOR,yytext());
            }
          case 94: break;
          case 34: 
            { System.out.println(yytext()); return symbol(sym.OUT,yytext());
            }
          case 95: break;
          case 35: 
            { System.out.println(yytext()); return symbol(sym.TRY,yytext());
            }
          case 96: break;
          case 36: 
            { System.out.println(yytext()); return symbol(sym.NULL,yytext());
            }
          case 97: break;
          case 37: 
            { System.out.println(yytext()); return symbol(sym.GOTO,yytext());
            }
          case 98: break;
          case 38: 
            { System.out.println(yytext()); return symbol(sym.ELSE,yytext());
            }
          case 99: break;
          case 39: 
            { System.out.println(yytext()); return symbol(sym.OPERADOR_BOOLEANO,yytext());
            }
          case 100: break;
          case 40: 
            { System.out.println(yytext()); return symbol(sym.CASE,yytext());
            }
          case 101: break;
          case 41: 
            { System.out.println(yytext()); return symbol(sym.MAIN,yytext());
            }
          case 102: break;
          case 42: 
            { System.out.println(yytext()); return symbol(sym.VOID,yytext());
            }
          case 103: break;
          case 43: 
            { System.out.println(yytext()); return symbol(sym.WHILE,yytext());
            }
          case 104: break;
          case 44: 
            { System.out.println(yytext()); return symbol(sym.WRITE,yytext());
            }
          case 105: break;
          case 45: 
            { System.out.println(yytext()); return symbol(sym.THROW,yytext());
            }
          case 106: break;
          case 46: 
            { System.out.println(yytext()); return symbol(sym.BREAK,yytext());
            }
          case 107: break;
          case 47: 
            { System.out.println(yytext()); return symbol(sym.CLASS,yytext());
            }
          case 108: break;
          case 48: 
            { System.out.println(yytext()); return symbol(sym.CONST,yytext());
            }
          case 109: break;
          case 49: 
            { System.out.println(yytext()); return symbol(sym.CATCH,yytext());
            }
          case 110: break;
          case 50: 
            { System.out.println(yytext()); return symbol(sym.SWITCH,yytext());
            }
          case 111: break;
          case 51: 
            { System.out.println(yytext()); return symbol(sym.CADENA,yytext());
            }
          case 112: break;
          case 52: 
            { System.out.println(yytext()); return symbol(sym.STATIC,yytext());
            }
          case 113: break;
          case 53: 
            { System.out.println(yytext()); return symbol(sym.SYSTEM,yytext());
            }
          case 114: break;
          case 54: 
            { System.out.println(yytext()); return symbol(sym.RETURN,yytext());
            }
          case 115: break;
          case 55: 
            { System.out.println(yytext()); return symbol(sym.FINALLY,yytext());
            }
          case 116: break;
          case 56: 
            { System.out.println(yytext()); return symbol(sym.DEFAULT,yytext());
            }
          case 117: break;
          case 57: 
            { System.out.println(yytext()); return symbol(sym.CONSOLE,yytext());
            }
          case 118: break;
          case 58: 
            { System.out.println(yytext()); return symbol(sym.ABSTRACT,yytext());
            }
          case 119: break;
          case 59: 
            { System.out.println(yytext()); return symbol(sym.INTERFACE,yytext());
            }
          case 120: break;
          case 60: 
            { System.out.println(yytext()); return symbol(sym.NAMESPACE,yytext());
            }
          case 121: break;
          case 61: 
            { System.out.println(yytext()); return symbol(sym.WRITELINE,yytext());
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
