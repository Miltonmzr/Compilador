package sintactico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    public void syntaxis_error(Symbol s){
        this.s=s;
        System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
    }
    public Symbol getS(){
        return s;
    }
    
    // Método ante algún error sintáctico en el que ya no es posible una recuperación de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:};

terminal String COMILLAS, TIPO_DATO, CADENA, IF, ELSE, DO,  WHILE, FOR, IGUAL, SUMA,  RESTA, MULTIPLICACION, DIVISION, OPERADOR_LOGICO, OPERADOR_RELACIONAL, OPERADOR_ATRIBUCION,  OPERADOR_INCREMENTO,  OPERADOR_BOOLEANO, PARENTESIS_APERTURA, PARENTESIS_CIERRE, LLAVE_APERTURA, LLAVE_CIERRE, CORCHETE_APERTURA, CORCHETE_CIERRE, MAIN, PUNTO_COMA,  ERROR,  ABSTRACT, BREAK, CASE, CATCH, CLASS, CONST, DEFAULT, FINALLY, GOTO, INTERFACE, NAMESPACE, NULL, OUT, RETURN, STATIC, SWITCH, THROW, TRY, VOID, SYSTEM, WRITELINE, CONSOLE, WRITE, OPERADOR_CONTEXTUAL, IDENTIFICADOR, NUMERO;

non terminal inicio, sentencia, declaracion, declaracion_for, if, if_else, while, do_while, for, sentencia_booleana, sentencia_for, switch, sentencia_case, declaracion_metodo, declaracion_funcion, declaracion_return, main, declaracion_numerica, declaracion_textual, declaracion_retributiva, tipos_funcion, tipos_metodo, variable_funcion, funciones_metodos, declaracion_variable_metodo, operaciones_basicas, reservadas, operadores_comparativos;

start with inicio;

inicio ::=
    NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA funciones_metodos LLAVE_CIERRE LLAVE_CIERRE |
    NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA main funciones_metodos LLAVE_CIERRE LLAVE_CIERRE |
    NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA LLAVE_CIERRE LLAVE_CIERRE |
    NAMESPACE IDENTIFICADOR LLAVE_APERTURA CLASS IDENTIFICADOR LLAVE_APERTURA main LLAVE_CIERRE LLAVE_CIERRE
; 
main ::=
   tipos_metodo MAIN PARENTESIS_APERTURA CADENA CORCHETE_APERTURA CORCHETE_CIERRE IDENTIFICADOR PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
sentencia ::= 
    sentencia declaracion |
    declaracion |
    sentencia if | 
    if |
    sentencia if_else |
    if_else |
    sentencia while |
    while |
    sentencia switch |
    switch |
    sentencia do_while
    do_while |
    sentencia for |
    for |
    sentencia reservadas |
    reservadas
;
reservadas ::=
    CONST |
    INTERFACE |
    OUT |
    WRITE |
    THROW |
    ABSTRACT | 
    SYSTEM |
    TRY |
    NULL |
    FINALLY |
    ERROR |
    WRITELINE |
    GOTO |
    CONSOLE |
    CATCH |
    OPERADOR_CONTEXTUAL |
    PARENTESIS_APERTURA |
    PARENTESIS_CIERRE |
    COMILLAS |
    IDENTIFICADOR |
    SUMA |
    RESTA |
    DIVISION |
    MULTIPLICACION |
    PUNTO_COMA
;
declaracion ::= 
    TIPO_DATO declaracion_numerica | 
    TIPO_DATO IDENTIFICADOR PUNTO_COMA |
    TIPO_DATO variable_funcion |
    CADENA declaracion_textual |
    CADENA IDENTIFICADOR PUNTO_COMA |
    CADENA variable_funcion |
    declaracion_retributiva
;
operaciones_basicas ::=
    IDENTIFICADOR SUMA IDENTIFICADOR |
    IDENTIFICADOR RESTA IDENTIFICADOR |
    IDENTIFICADOR DIVISION IDENTIFICADOR |
    IDENTIFICADOR MULTIPLICACION IDENTIFICADOR
;
declaracion_numerica ::=
    IDENTIFICADOR OPERADOR_ATRIBUCION NUMERO PUNTO_COMA |
    IDENTIFICADOR IGUAL NUMERO PUNTO_COMA |
    IDENTIFICADOR OPERADOR_INCREMENTO PUNTO_COMA |
    IDENTIFICADOR IGUAL operaciones_basicas PUNTO_COMA
;
declaracion_textual ::=
    IDENTIFICADOR OPERADOR_ATRIBUCION COMILLAS COMILLAS PUNTO_COMA |
    IDENTIFICADOR IGUAL COMILLAS COMILLAS PUNTO_COMA |
    IDENTIFICADOR OPERADOR_ATRIBUCION COMILLAS IDENTIFICADOR COMILLAS PUNTO_COMA |
    IDENTIFICADOR IGUAL COMILLAS IDENTIFICADOR COMILLAS PUNTO_COMA 
;
variable_funcion ::=
    IDENTIFICADOR IGUAL IDENTIFICADOR PARENTESIS_APERTURA IDENTIFICADOR PARENTESIS_CIERRE PUNTO_COMA | 
    IDENTIFICADOR IGUAL IDENTIFICADOR PARENTESIS_APERTURA IDENTIFICADOR OPERADOR_CONTEXTUAL IDENTIFICADOR PARENTESIS_CIERRE PUNTO_COMA |
    IDENTIFICADOR IGUAL IDENTIFICADOR PARENTESIS_APERTURA IDENTIFICADOR OPERADOR_CONTEXTUAL IDENTIFICADOR OPERADOR_CONTEXTUAL IDENTIFICADOR PARENTESIS_CIERRE PUNTO_COMA
;
declaracion_retributiva ::=
    declaracion_numerica |
    declaracion_textual
;
tipos_metodo ::=
    STATIC VOID |
    VOID
;
tipos_funcion ::=
    STATIC TIPO_DATO |
    TIPO_DATO
;
declaracion_return ::=
    RETURN IDENTIFICADOR PUNTO_COMA
;
declaracion_variable_metodo ::=
    TIPO_DATO IDENTIFICADOR
;
declaracion_metodo ::=
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE |
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE |
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE |
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE |
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE |
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA LLAVE_CIERRE |
    tipos_metodo IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA LLAVE_CIERRE
;
declaracion_funcion ::=
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia declaracion_return LLAVE_CIERRE |
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia declaracion_return LLAVE_CIERRE |
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia declaracion_return LLAVE_CIERRE |
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo OPERADOR_CONTEXTUAL declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA sentencia declaracion_return LLAVE_CIERRE |
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA sentencia declaracion_return LLAVE_CIERRE |
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA declaracion_variable_metodo PARENTESIS_CIERRE LLAVE_APERTURA declaracion_return LLAVE_CIERRE |
    tipos_funcion IDENTIFICADOR PARENTESIS_APERTURA PARENTESIS_CIERRE LLAVE_APERTURA declaracion_return LLAVE_CIERRE
;
funciones_metodos ::=
    funciones_metodos declaracion_metodo |
    declaracion_metodo |
    funciones_metodos declaracion_funcion |
    declaracion_funcion
;
if ::= 
    IF PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
operadores_comparativos ::=
    OPERADOR_RELACIONAL |
    OPERADOR_LOGICO
;
sentencia_booleana ::= 
    OPERADOR_BOOLEANO | 
    IDENTIFICADOR operadores_comparativos OPERADOR_BOOLEANO |
    IDENTIFICADOR operadores_comparativos NUMERO |
    IDENTIFICADOR operadores_comparativos IDENTIFICADOR |
    IDENTIFICADOR operadores_comparativos COMILLAS COMILLAS |
    IDENTIFICADOR operadores_comparativos COMILLAS IDENTIFICADOR COMILLAS
;
if_else ::=
    IF PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE ELSE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
switch ::= 
    SWITCH PARENTESIS_APERTURA sentencia PARENTESIS_CIERRE LLAVE_APERTURA sentencia_case
;
sentencia_case ::= 
    CASE IDENTIFICADOR OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA |
    DEFAULT OPERADOR_ATRIBUCION sentencia BREAK PUNTO_COMA
;
while ::= 
    WHILE PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
do_while ::= 
    DO LLAVE_APERTURA sentencia LLAVE_CIERRE WHILE PARENTESIS_APERTURA sentencia_booleana PARENTESIS_CIERRE PUNTO_COMA
;
for ::= 
    FOR PARENTESIS_APERTURA sentencia_for PARENTESIS_CIERRE LLAVE_APERTURA sentencia LLAVE_CIERRE
;
sentencia_for ::=
    TIPO_DATO IDENTIFICADOR IGUAL NUMERO PUNTO_COMA sentencia_booleana PUNTO_COMA declaracion_for |
    IDENTIFICADOR IGUAL NUMERO PUNTO_COMA sentencia_booleana PUNTO_COMA declaracion_for
;
declaracion_for ::= 
    IDENTIFICADOR OPERADOR_ATRIBUCION NUMERO |
    IDENTIFICADOR OPERADOR_INCREMENTO | 
    OPERADOR_INCREMENTO IDENTIFICADOR
;